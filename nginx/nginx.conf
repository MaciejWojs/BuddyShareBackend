user root;
worker_processes 1;

# Dodanie dyrektywy env dla zmiennych środowiskowych
env HOST;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;    
    server_tokens off;
    more_clear_headers Server;

    resolver 127.0.0.11 ipv6=off valid=30s;

    ###############################
    # Konfiguracja kompresji Brotli
    ###############################
    brotli on;
    brotli_comp_level 5;
    brotli_buffers 16 8k;
    brotli_static on;
    # Typy MIME, które mają być kompresowane
    brotli_types text/plain text/css application/javascript application/json application/xml application/dash+xml;

    #################################
    # Konfiguracja cache dla auth requests
    #################################
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=zone_auth:10m max_size=100m inactive=60m;
    
    # Dodanie map dla debugowania
    map $request_uri $debug_uri {
        default $request_uri;
    }

    server {
        listen 80;
        server_name localhost;

        # Dodanie endpointu debug do sprawdzania zawartości katalogów
        location /debug/ {
            alias /tmp/;
            autoindex on;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
        }

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }

        # Lokalizacja wewnętrzna, która zapyta backend o token dla danego stream_id
        # Debug log auth
        error_log /var/log/nginx/auth_request.log debug;

        location = /_auth_dash {
            internal;
            
            # Ustawienie zmiennej zamiast bezpośredniego URL
            set $backend_url http://app:5000/streams/token;
            
            # Przekazujemy stream_id jako nagłówek i parametr zapytania
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Stream-ID $stream_id;
            
            # Przekazanie stream_id jako parametr zapytania
            proxy_pass $backend_url?stream_id=$stream_id;
            
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header Host $host;
            
            # Zachowujemy oryginalne nagłówki z odpowiedzi
            proxy_pass_header Token;
            
            # Włączenie cachowania autoryzacji
            proxy_cache_key "$stream_id";
            proxy_cache_valid 200 300s;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache zone_auth;
            proxy_cache_lock on;
            proxy_cache_lock_timeout 5s;
            
            # Logujemy co zostało wysłane do backendu
            error_log /var/log/nginx/auth_request.log debug;
        }

        # 2) Debugowy endpoint
        location ~ ^/debug/env(?<id>\d+)(?:_(?<quality>\d+p))?\.mpd$ {
            set $stream_id $id;
            auth_request        /_auth_dash;
            auth_request_set    $stream_token  $upstream_http_token;
            auth_request_set    $auth_status   $upstream_status;
            error_log           /var/log/nginx/token_headers.log debug;

            add_header           Content-Type   text/plain;
            add_header           Access-Control-Allow-Origin *;
            return 200           "Stream ID: $stream_id\nToken: $stream_token\n";
        }

        # 3) Manifest podstawowy: /dash/31.mpd
        location ~ ^/dash/(?<id>[0-9]+)\.mpd$ {
            set $stream_id    $id;
            auth_request        /_auth_dash;
            auth_request_set    $stream_token  $upstream_http_token;

            types { application/dash+xml mpd; }
            default_type       application/dash+xml;

            add_header          Cache-Control no-cache;
            expires             -1;

            proxy_set_header    Host           $host;
            proxy_pass          http://127.0.0.1:8080/dash/${stream_token}.mpd;
        }

        # 4) Manifest z jakością: /dash/test/31_720p.mpd
        location ~ ^/dash/test/(?<id>[0-9]+)_(?<quality>\d+p)\.mpd$ {
            set $stream_id    $id;
            auth_request        /_auth_dash;
            auth_request_set    $stream_token  $upstream_http_token;

            types { application/dash+xml mpd; }
            default_type       application/dash+xml;

            add_header          Cache-Control no-cache;
            expires             -1;

            proxy_set_header    Host           $host;
            proxy_pass          http://127.0.0.1:8080/dash/test/${stream_token}_${quality}.mpd;
        }

        # 5) Segmenty bez jakości: init + media
        location ~ ^/dash/(?<name>[0-9a-f]+-(?:init|\d+)\.(?:m4v|m4a|m4s))$ {
            proxy_set_header    Host           $host;

            proxy_pass          http://127.0.0.1:8080$request_uri;
        }

        # 6) Segmenty z jakością: init + media
        location ~ ^/dash/test/(?<name>[0-9a-f]+_\d+p-(?:init|\d+)\.(?:m4v|m4a|m4s))$ {
            proxy_set_header    Host           $host;

            proxy_pass          http://127.0.0.1:8080$request_uri;
        }

    }

    server {
        listen 8080;
        
        location /dash/ {
            types {
                application/dash+xml mpd;
                video/mp4 mp4;
                video/mp4 m4v;
                audio/mp4 m4a;
                application/octet-stream m4s;
            }
            alias /tmp/dash/;
            add_header Access-Control-Allow-Origin *;
        }
        
        # Bezpośredni dostęp do streamów DASH - transkodowane
        location /dash/test/ {
            types {
                application/dash+xml mpd;
                video/mp4 mp4;
                audio/mp4 m4a;
                application/octet-stream m4s;
            }
            alias /tmp/transcode/;
            add_header Access-Control-Allow-Origin *;
        }

        # Statystyki RTMP - lista aktywnych streamów
        location /api/streams {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
            rtmp_stat_format json;
            add_header Access-Control-Allow-Origin *;
            add_header Content-Type application/json;
        }
        
        # Kontrola streamów RTMP
        location /api/control {
            rtmp_control all;
            add_header Access-Control-Allow-Origin *;
        }
        
        # Kontrola DASH live streamów
        location /api/dash/control {
            rtmp_control all;
            add_header Access-Control-Allow-Origin *;
        }
        
        # Status DASH streamów
        location /api/dash/status {
            alias /tmp/dash/;
            autoindex on;
            add_header Access-Control-Allow-Origin *;
            add_header Content-Type application/json;
        }
    }
}

# Konfiguracja RTMP dla Nginx
rtmp {
    server {
        listen 1935;
        chunk_size 4096;

        application test {
            live on;
            record off;

            #DASH
            dash on;
            dash_path /tmp/transcode/;
            dash_fragment 3;
            dash_playlist_length 10;
        }   

        # Nazwa streamu
        application live {
            live on;
            record off;

            notify_method get;
            on_publish http://${HOST}:5000/streams/notify/start;
            on_publish_done http://${HOST}:5000/streams/notify/end;
            
            # Konwersja RTMP do DASH LL
            dash on;
            dash_path /tmp/dash;
            dash_fragment 3;
            dash_playlist_length 120;

            # Ekstraktuj bazową nazwę streamu bez przyrostka jakości (_360p, _480p, _720p)
            exec_publish_done sh -c 'STREAM_NAME=$(echo "$name" | sed -E "s/_(360p|480p|720p)$//g"); echo "Ekstrahowana nazwa streamu: $STREAM_NAME" >> /tmp/stream_debug.log';
           
            # Używamy pełnej nazwy streamu bez przyrostków jakości
            # Przyklad komend ffmpeg pozostaje taki sam…

            # Upewnij się, że katalog docelowy istnieje przed transkodowaniem
            exec_publish mkdir -p /tmp/transcode;
            
            # Logowanie rozpoczęcia transkodowania
            exec_publish echo "Rozpoczęcie transkodowania strumienia $name na $(date)" >> /tmp/transcode_debug.log;
            
            # Zmodyfikowana komenda ffmpeg
            exec ffmpeg -threads 0 -i http://127.0.0.1:8080/dash/${name}.mpd -filter_complex "[0:v]split=3[v720][v480][v360];[0:a]asplit=3[a720][a480][a360];[v720]scale=1280:720[v720out];[v480]scale=854:480[v480out];[v360]scale=640:360[v360out]" -map "[v720out]" -map "[a720]" -c:v libx264 -preset superfast -tune zerolatency -b:v 1000k -maxrate 1000k -bufsize 2000k -c:a aac -ar 44100 -b:a 128k -f flv rtmp://127.0.0.1:1935/test/${name}_720p -map "[v480out]" -map "[a480]" -c:v libx264 -preset superfast -tune zerolatency -b:v 500k -maxrate 500k -bufsize 1000k -c:a aac -ar 44100 -b:a 96k -f flv rtmp://127.0.0.1:1935/test/${name}_480p -map "[v360out]" -map "[a360]" -c:v libx264 -preset superfast -tune zerolatency -b:v 300k -maxrate 300k -bufsize 600k -c:a aac -ar 44100 -b:a 64k -f flv rtmp://127.0.0.1:1935/test/${name}_360p;
            
            # Logowanie zakończenia transkodowania
            exec_publish_done echo "Zakończenie transkodowania strumienia $name na $(date)" >> /tmp/transcode_debug.log;
            
            # Logowanie rozpoczęcia strumienia dla diagnostyki
            exec_publish echo "Strumień $name rozpoczęty w aplikacji live na $(date)" >> /tmp/stream_start.log;
            
        }
    }
}