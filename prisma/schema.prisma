generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model Users {
  userId         Int @id @default(autoincrement()) @map("id")
  userInfoId     Int @unique @map("user_info_id")
  userSettingsId Int @unique @map("user_settings_id")

  userInfo     UsersInfo    @relation("users_info", fields: [userInfoId], references: [userInfoId])
  userSettings UserSettings @relation("User_UserSettings", fields: [userSettingsId], references: [userSettingsId])

  streamer  Streamers?  @relation("UserStreamer")
  moderator Moderators? @relation("UserModerator")

  following Followers[] @relation("Follower")
  followers Followers[] @relation("Followed")

  notifications Notifications[]
  subscribers   Subscribers[]
  chatMessages  ChatMessages[]
  refreshTokens RefreshToken[]
  // userPermissions UserPermissions[]

  @@map("users")
}

model UsersInfo {
  userInfoId     Int      @id @default(autoincrement()) @map("id")
  username       String   @unique
  profilePicture String   @default("") @map("profile_picture")
  description    String   @default("")
  email          String   @unique
  isBanned       Boolean  @default(false)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  // userRoleId     Int      @map("user_role_id")

  // userRole UserRoles @relation(fields: [userRoleId], references: [userRoleId])
  userRole Role   @default(USER)
  user     Users? @relation("users_info")

  @@map("users_info")
}

model UserSettings {
  userSettingsId       Int     @id @default(autoincrement()) @map("id")
  notificationsEnabled Boolean @default(true) @map("notifications_enabled")
  darkMode             Boolean @default(true)
  passwordHash         String  @map("password_hash")

  user Users? @relation("User_UserSettings")

  @@map("user_settings")
}

model RefreshToken {
  id          String   @id @default(uuid())
  token       String   @unique
  userId      Int      @map("user_id")
  expiresAt   DateTime @map("expires_at")
  issuedAt    DateTime @default(now()) @map("issued_at")
  invalidated Boolean  @default(false)

  user Users @relation(fields: [userId], references: [userId])

  @@map("refresh_tokens")
}

// model UserRoles {
//   userRoleId  Int     @id @default(autoincrement()) @map("id")
//   name        String  @unique
//   isSystem    Boolean @default(false)
//   description String?

//   userInfo    UsersInfo[]
//   permissions RolePermissions[]

//   @@map("user_roles")
// }

// model Permissions {
//   permissionId Int     @id @default(autoincrement()) @map("id")
//   name         String  @unique
//   description  String?

//   rolePermissions RolePermissions[]
//   userPermissions UserPermissions[]

//   @@map("permissions")
// }

// model RolePermissions {
//   rolePermissionId Int @id @default(autoincrement()) @map("id")
//   roleId           Int @map("role_id")
//   permissionId     Int @map("permission_id")

//   role       UserRoles   @relation(fields: [roleId], references: [userRoleId])
//   permission Permissions @relation(fields: [permissionId], references: [permissionId])

//   @@map("role_permissions")
// }

// model UserPermissions {
//   userPermissionId Int @id @default(autoincrement()) @map("id")
//   userId           Int @map("user_id")
//   permissionId     Int @map("permission_id")

//   user       Users       @relation(fields: [userId], references: [userId])
//   permission Permissions @relation(fields: [permissionId], references: [permissionId])

//   @@map("user_permissions")
// }

model Streamers {
  streamerId Int    @id @default(autoincrement()) @map("id")
  userId     Int    @unique @map("user_id")
  token      String @unique @map("access_token")

  user        Users              @relation("UserStreamer", fields: [userId], references: [userId])
  streams     Streams[]
  subscribers Subscribers[]
  moderators  StreamModerators[]

  @@map("streamers")
}

model Moderators {
  moderatorId Int @id @default(autoincrement()) @map("id")
  userId      Int @unique @map("user_id")

  user       Users              @relation("UserModerator", fields: [userId], references: [userId])
  moderators StreamModerators[]

  @@map("moderators")
}

model StreamModerators {
  streamModeratorId Int @id @default(autoincrement()) @map("id")
  streamerId        Int @map("streamer_id")
  moderatorId       Int @map("moderator_id")

  streamer  Streamers  @relation(fields: [streamerId], references: [streamerId])
  moderator Moderators @relation(fields: [moderatorId], references: [moderatorId])

  @@map("stream_moderators")
}

model Streams {
  streamId   Int @id @default(autoincrement()) @map("id")
  streamerId Int @map("streamer_id")
  optionsId  Int @unique @map("options_id")

  streamer      Streamers           @relation(fields: [streamerId], references: [streamerId])
  options       StreamOptions       @relation(fields: [optionsId], references: [streamOptionId])
  chatMessages  ChatMessages[]
  notifications Notifications[]
  tags          StreamsTags[]
  categories    StreamsCategories[]

  @@map("streams")
}

model ChatMessages {
  chatMessageId Int      @id @default(autoincrement()) @map("id")
  streamId      Int      @map("stream_id")
  userId        Int      @map("user_id")
  message       String
  createdAt     DateTime @map("created_at")
  isDeleted     Boolean  @map("is_deleted")

  stream Streams @relation(fields: [streamId], references: [streamId])
  user   Users   @relation(fields: [userId], references: [userId])

  @@map("chat_messages")
}

model StreamOptions {
  streamOptionId Int       @id @default(autoincrement()) @map("id")
  title          String
  description    String
  createdAt      DateTime  @map("created_at") @default(now())
  updatedAt      DateTime  @map("updated_at") @default(now()) @updatedAt
  thumbnail      String?
  isDeleted      Boolean
  isLive         Boolean
  isPublic       Boolean
  path           String?
  Streams        Streams[]

  @@map("stream_options")
}

model Tags {
  tagId Int    @id @default(autoincrement()) @map("id")
  name  String @unique

  streamTags StreamsTags[]

  @@map("tags")
}

model StreamsTags {
  streamTagId Int @id @default(autoincrement()) @map("id")
  streamId    Int @map("stream_id")
  tagId       Int @map("tag_id")

  stream Streams @relation(fields: [streamId], references: [streamId])
  tag    Tags    @relation(fields: [tagId], references: [tagId])

  @@map("streams_tags")
}

model Categories {
  categoryId Int    @id @default(autoincrement()) @map("id")
  name       String @unique

  streamCategories StreamsCategories[]

  @@map("categories")
}

model StreamsCategories {
  streamCategoryId Int @id @default(autoincrement()) @map("id")
  streamId         Int @map("stream_id")
  categoryId       Int @map("category_id")

  stream   Streams    @relation(fields: [streamId], references: [streamId])
  category Categories @relation(fields: [categoryId], references: [categoryId])

  @@map("streams_categories")
}

model Notifications {
  notificationId Int      @id @default(autoincrement()) @map("id")
  userId         Int      @map("user_id")
  streamId       Int?     @map("stream_id")
  message        String
  createdAt      DateTime @map("created_at")
  isRead         Boolean

  user   Users    @relation(fields: [userId], references: [userId])
  stream Streams? @relation(fields: [streamId], references: [streamId])

  @@map("notifications")
}

model Subscribers {
  subscriberId Int @id @default(autoincrement()) @map("id")
  userId       Int @map("user_id")
  streamerId   Int @map("streamer_id")

  user     Users     @relation(fields: [userId], references: [userId])
  streamer Streamers @relation(fields: [streamerId], references: [streamerId])

  @@map("subscribers")
}

model Followers {
  followerId     Int @id @default(autoincrement()) @map("id")
  followerUserId Int @map("follower_user_id")
  followedUserId Int @map("followed_user_id")

  // Relacje
  follower Users @relation("Follower", fields: [followerUserId], references: [userId])
  followed Users @relation("Followed", fields: [followedUserId], references: [userId])

  @@unique([followerUserId, followedUserId]) // Unikalna kombinacja follower + followed
  @@map("followers")
}
